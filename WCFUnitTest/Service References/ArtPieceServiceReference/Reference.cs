//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFUnitTest.ArtPieceServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArtPiece", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ArtPiece : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtPieceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PurchasePriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtPieceId {
            get {
                return this.ArtPieceIdField;
            }
            set {
                if ((this.ArtPieceIdField.Equals(value) != true)) {
                    this.ArtPieceIdField = value;
                    this.RaisePropertyChanged("ArtPieceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PictureUrl {
            get {
                return this.PictureUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureUrlField, value) != true)) {
                    this.PictureUrlField = value;
                    this.RaisePropertyChanged("PictureUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PurchasePrice {
            get {
                return this.PurchasePriceField;
            }
            set {
                if ((this.PurchasePriceField.Equals(value) != true)) {
                    this.PurchasePriceField = value;
                    this.RaisePropertyChanged("PurchasePrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ArtPieceServiceReference.IArtPieceService")]
    public interface IArtPieceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/Add", ReplyAction="http://tempuri.org/IArtPieceService/AddResponse")]
        void Add(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/Add", ReplyAction="http://tempuri.org/IArtPieceService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetAll", ReplyAction="http://tempuri.org/IArtPieceService/GetAllResponse")]
        WCFUnitTest.ArtPieceServiceReference.ArtPiece[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetAll", ReplyAction="http://tempuri.org/IArtPieceService/GetAllResponse")]
        System.Threading.Tasks.Task<WCFUnitTest.ArtPieceServiceReference.ArtPiece[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/Update", ReplyAction="http://tempuri.org/IArtPieceService/UpdateResponse")]
        void Update(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/Update", ReplyAction="http://tempuri.org/IArtPieceService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/Delete", ReplyAction="http://tempuri.org/IArtPieceService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/Delete", ReplyAction="http://tempuri.org/IArtPieceService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetById", ReplyAction="http://tempuri.org/IArtPieceService/GetByIdResponse")]
        WCFUnitTest.ArtPieceServiceReference.ArtPiece GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetById", ReplyAction="http://tempuri.org/IArtPieceService/GetByIdResponse")]
        System.Threading.Tasks.Task<WCFUnitTest.ArtPieceServiceReference.ArtPiece> GetByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IArtPieceServiceChannel : WCFUnitTest.ArtPieceServiceReference.IArtPieceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArtPieceServiceClient : System.ServiceModel.ClientBase<WCFUnitTest.ArtPieceServiceReference.IArtPieceService>, WCFUnitTest.ArtPieceServiceReference.IArtPieceService {
        
        public ArtPieceServiceClient() {
        }
        
        public ArtPieceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ArtPieceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ArtPieceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ArtPieceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece) {
            base.Channel.Add(piece);
        }
        
        public System.Threading.Tasks.Task AddAsync(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece) {
            return base.Channel.AddAsync(piece);
        }
        
        public WCFUnitTest.ArtPieceServiceReference.ArtPiece[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<WCFUnitTest.ArtPieceServiceReference.ArtPiece[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Update(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece) {
            base.Channel.Update(piece);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WCFUnitTest.ArtPieceServiceReference.ArtPiece piece) {
            return base.Channel.UpdateAsync(piece);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public WCFUnitTest.ArtPieceServiceReference.ArtPiece GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<WCFUnitTest.ArtPieceServiceReference.ArtPiece> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
    }
}
