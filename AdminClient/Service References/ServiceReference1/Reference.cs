//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdminClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArtPiece", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ArtPiece : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtPieceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PurchasePriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtPieceId {
            get {
                return this.ArtPieceIdField;
            }
            set {
                if ((this.ArtPieceIdField.Equals(value) != true)) {
                    this.ArtPieceIdField = value;
                    this.RaisePropertyChanged("ArtPieceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PictureUrl {
            get {
                return this.PictureUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureUrlField, value) != true)) {
                    this.PictureUrlField = value;
                    this.RaisePropertyChanged("PictureUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PurchasePrice {
            get {
                return this.PurchasePriceField;
            }
            set {
                if ((this.PurchasePriceField.Equals(value) != true)) {
                    this.PurchasePriceField = value;
                    this.RaisePropertyChanged("PurchasePrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Auction", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Auction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuctionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuctionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan LotDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.Lot[] LotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MultiplierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.Status StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuctionId {
            get {
                return this.AuctionIdField;
            }
            set {
                if ((this.AuctionIdField.Equals(value) != true)) {
                    this.AuctionIdField = value;
                    this.RaisePropertyChanged("AuctionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuctionName {
            get {
                return this.AuctionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuctionNameField, value) != true)) {
                    this.AuctionNameField = value;
                    this.RaisePropertyChanged("AuctionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan LotDuration {
            get {
                return this.LotDurationField;
            }
            set {
                if ((this.LotDurationField.Equals(value) != true)) {
                    this.LotDurationField = value;
                    this.RaisePropertyChanged("LotDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.Lot[] Lots {
            get {
                return this.LotsField;
            }
            set {
                if ((object.ReferenceEquals(this.LotsField, value) != true)) {
                    this.LotsField = value;
                    this.RaisePropertyChanged("Lots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Multiplier {
            get {
                return this.MultiplierField;
            }
            set {
                if ((this.MultiplierField.Equals(value) != true)) {
                    this.MultiplierField = value;
                    this.RaisePropertyChanged("Multiplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lot", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Lot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.ArtPiece ArtPieceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.Auction AuctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuctionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.Bid[] BidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LotIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinBidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.ArtPiece ArtPiece {
            get {
                return this.ArtPieceField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtPieceField, value) != true)) {
                    this.ArtPieceField = value;
                    this.RaisePropertyChanged("ArtPiece");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.Auction Auction {
            get {
                return this.AuctionField;
            }
            set {
                if ((object.ReferenceEquals(this.AuctionField, value) != true)) {
                    this.AuctionField = value;
                    this.RaisePropertyChanged("Auction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuctionId {
            get {
                return this.AuctionIdField;
            }
            set {
                if ((this.AuctionIdField.Equals(value) != true)) {
                    this.AuctionIdField = value;
                    this.RaisePropertyChanged("AuctionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.Bid[] Bids {
            get {
                return this.BidsField;
            }
            set {
                if ((object.ReferenceEquals(this.BidsField, value) != true)) {
                    this.BidsField = value;
                    this.RaisePropertyChanged("Bids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LotId {
            get {
                return this.LotIdField;
            }
            set {
                if ((this.LotIdField.Equals(value) != true)) {
                    this.LotIdField = value;
                    this.RaisePropertyChanged("LotId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinBid {
            get {
                return this.MinBidField;
            }
            set {
                if ((this.MinBidField.Equals(value) != true)) {
                    this.MinBidField = value;
                    this.RaisePropertyChanged("MinBid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ready = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ongoing = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Complete = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bid", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Bid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BidIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.Member BidderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdminClient.ServiceReference1.Lot LotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LotIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BidId {
            get {
                return this.BidIdField;
            }
            set {
                if ((this.BidIdField.Equals(value) != true)) {
                    this.BidIdField = value;
                    this.RaisePropertyChanged("BidId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.Member Bidder {
            get {
                return this.BidderField;
            }
            set {
                if ((object.ReferenceEquals(this.BidderField, value) != true)) {
                    this.BidderField = value;
                    this.RaisePropertyChanged("Bidder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdminClient.ServiceReference1.Lot Lot {
            get {
                return this.LotField;
            }
            set {
                if ((object.ReferenceEquals(this.LotField, value) != true)) {
                    this.LotField = value;
                    this.RaisePropertyChanged("Lot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LotId {
            get {
                return this.LotIdField;
            }
            set {
                if ((this.LotIdField.Equals(value) != true)) {
                    this.LotIdField = value;
                    this.RaisePropertyChanged("LotId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Member", Namespace="http://schemas.datacontract.org/2004/07/WCFBusinessLogic.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Member : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CprField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MemberIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cpr {
            get {
                return this.CprField;
            }
            set {
                if ((object.ReferenceEquals(this.CprField, value) != true)) {
                    this.CprField = value;
                    this.RaisePropertyChanged("Cpr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberId {
            get {
                return this.MemberIdField;
            }
            set {
                if ((this.MemberIdField.Equals(value) != true)) {
                    this.MemberIdField = value;
                    this.RaisePropertyChanged("MemberId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IArtPieceService")]
    public interface IArtPieceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/AddArtPiece", ReplyAction="http://tempuri.org/IArtPieceService/AddArtPieceResponse")]
        void AddArtPiece(AdminClient.ServiceReference1.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/AddArtPiece", ReplyAction="http://tempuri.org/IArtPieceService/AddArtPieceResponse")]
        System.Threading.Tasks.Task AddArtPieceAsync(AdminClient.ServiceReference1.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetAllArtPieces", ReplyAction="http://tempuri.org/IArtPieceService/GetAllArtPiecesResponse")]
        AdminClient.ServiceReference1.ArtPiece[] GetAllArtPieces();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetAllArtPieces", ReplyAction="http://tempuri.org/IArtPieceService/GetAllArtPiecesResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.ArtPiece[]> GetAllArtPiecesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/UpdateArtPiece", ReplyAction="http://tempuri.org/IArtPieceService/UpdateArtPieceResponse")]
        void UpdateArtPiece(AdminClient.ServiceReference1.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/UpdateArtPiece", ReplyAction="http://tempuri.org/IArtPieceService/UpdateArtPieceResponse")]
        System.Threading.Tasks.Task UpdateArtPieceAsync(AdminClient.ServiceReference1.ArtPiece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/DeleteArtPiece", ReplyAction="http://tempuri.org/IArtPieceService/DeleteArtPieceResponse")]
        void DeleteArtPiece(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/DeleteArtPiece", ReplyAction="http://tempuri.org/IArtPieceService/DeleteArtPieceResponse")]
        System.Threading.Tasks.Task DeleteArtPieceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetArtPieceById", ReplyAction="http://tempuri.org/IArtPieceService/GetArtPieceByIdResponse")]
        AdminClient.ServiceReference1.ArtPiece GetArtPieceById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArtPieceService/GetArtPieceById", ReplyAction="http://tempuri.org/IArtPieceService/GetArtPieceByIdResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.ArtPiece> GetArtPieceByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IArtPieceServiceChannel : AdminClient.ServiceReference1.IArtPieceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArtPieceServiceClient : System.ServiceModel.ClientBase<AdminClient.ServiceReference1.IArtPieceService>, AdminClient.ServiceReference1.IArtPieceService {
        
        public ArtPieceServiceClient() {
        }
        
        public ArtPieceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ArtPieceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ArtPieceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ArtPieceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddArtPiece(AdminClient.ServiceReference1.ArtPiece piece) {
            base.Channel.AddArtPiece(piece);
        }
        
        public System.Threading.Tasks.Task AddArtPieceAsync(AdminClient.ServiceReference1.ArtPiece piece) {
            return base.Channel.AddArtPieceAsync(piece);
        }
        
        public AdminClient.ServiceReference1.ArtPiece[] GetAllArtPieces() {
            return base.Channel.GetAllArtPieces();
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.ArtPiece[]> GetAllArtPiecesAsync() {
            return base.Channel.GetAllArtPiecesAsync();
        }
        
        public void UpdateArtPiece(AdminClient.ServiceReference1.ArtPiece piece) {
            base.Channel.UpdateArtPiece(piece);
        }
        
        public System.Threading.Tasks.Task UpdateArtPieceAsync(AdminClient.ServiceReference1.ArtPiece piece) {
            return base.Channel.UpdateArtPieceAsync(piece);
        }
        
        public void DeleteArtPiece(int id) {
            base.Channel.DeleteArtPiece(id);
        }
        
        public System.Threading.Tasks.Task DeleteArtPieceAsync(int id) {
            return base.Channel.DeleteArtPieceAsync(id);
        }
        
        public AdminClient.ServiceReference1.ArtPiece GetArtPieceById(int id) {
            return base.Channel.GetArtPieceById(id);
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.ArtPiece> GetArtPieceByIdAsync(int id) {
            return base.Channel.GetArtPieceByIdAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuctionService")]
    public interface IAuctionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/AddAuction", ReplyAction="http://tempuri.org/IAuctionService/AddAuctionResponse")]
        void AddAuction(AdminClient.ServiceReference1.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/AddAuction", ReplyAction="http://tempuri.org/IAuctionService/AddAuctionResponse")]
        System.Threading.Tasks.Task AddAuctionAsync(AdminClient.ServiceReference1.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/UpdateAuction", ReplyAction="http://tempuri.org/IAuctionService/UpdateAuctionResponse")]
        void UpdateAuction(AdminClient.ServiceReference1.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/UpdateAuction", ReplyAction="http://tempuri.org/IAuctionService/UpdateAuctionResponse")]
        System.Threading.Tasks.Task UpdateAuctionAsync(AdminClient.ServiceReference1.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAllAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetAllAuctionsResponse")]
        AdminClient.ServiceReference1.Auction[] GetAllAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAllAuctions", ReplyAction="http://tempuri.org/IAuctionService/GetAllAuctionsResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Auction[]> GetAllAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/DeleteAuction", ReplyAction="http://tempuri.org/IAuctionService/DeleteAuctionResponse")]
        void DeleteAuction(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/DeleteAuction", ReplyAction="http://tempuri.org/IAuctionService/DeleteAuctionResponse")]
        System.Threading.Tasks.Task DeleteAuctionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuctionById", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionByIdResponse")]
        AdminClient.ServiceReference1.Auction GetAuctionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionService/GetAuctionById", ReplyAction="http://tempuri.org/IAuctionService/GetAuctionByIdResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Auction> GetAuctionByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuctionServiceChannel : AdminClient.ServiceReference1.IAuctionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuctionServiceClient : System.ServiceModel.ClientBase<AdminClient.ServiceReference1.IAuctionService>, AdminClient.ServiceReference1.IAuctionService {
        
        public AuctionServiceClient() {
        }
        
        public AuctionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuctionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAuction(AdminClient.ServiceReference1.Auction auction) {
            base.Channel.AddAuction(auction);
        }
        
        public System.Threading.Tasks.Task AddAuctionAsync(AdminClient.ServiceReference1.Auction auction) {
            return base.Channel.AddAuctionAsync(auction);
        }
        
        public void UpdateAuction(AdminClient.ServiceReference1.Auction auction) {
            base.Channel.UpdateAuction(auction);
        }
        
        public System.Threading.Tasks.Task UpdateAuctionAsync(AdminClient.ServiceReference1.Auction auction) {
            return base.Channel.UpdateAuctionAsync(auction);
        }
        
        public AdminClient.ServiceReference1.Auction[] GetAllAuctions() {
            return base.Channel.GetAllAuctions();
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Auction[]> GetAllAuctionsAsync() {
            return base.Channel.GetAllAuctionsAsync();
        }
        
        public void DeleteAuction(int id) {
            base.Channel.DeleteAuction(id);
        }
        
        public System.Threading.Tasks.Task DeleteAuctionAsync(int id) {
            return base.Channel.DeleteAuctionAsync(id);
        }
        
        public AdminClient.ServiceReference1.Auction GetAuctionById(int id) {
            return base.Channel.GetAuctionById(id);
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Auction> GetAuctionByIdAsync(int id) {
            return base.Channel.GetAuctionByIdAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILotService")]
    public interface ILotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/AddLot", ReplyAction="http://tempuri.org/ILotService/AddLotResponse")]
        void AddLot(AdminClient.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/AddLot", ReplyAction="http://tempuri.org/ILotService/AddLotResponse")]
        System.Threading.Tasks.Task AddLotAsync(AdminClient.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/GetAllLotsByAuction", ReplyAction="http://tempuri.org/ILotService/GetAllLotsByAuctionResponse")]
        AdminClient.ServiceReference1.Lot[] GetAllLotsByAuction(AdminClient.ServiceReference1.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/GetAllLotsByAuction", ReplyAction="http://tempuri.org/ILotService/GetAllLotsByAuctionResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Lot[]> GetAllLotsByAuctionAsync(AdminClient.ServiceReference1.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/UpdateLot", ReplyAction="http://tempuri.org/ILotService/UpdateLotResponse")]
        void UpdateLot(AdminClient.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/UpdateLot", ReplyAction="http://tempuri.org/ILotService/UpdateLotResponse")]
        System.Threading.Tasks.Task UpdateLotAsync(AdminClient.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/DeleteLot", ReplyAction="http://tempuri.org/ILotService/DeleteLotResponse")]
        void DeleteLot(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/DeleteLot", ReplyAction="http://tempuri.org/ILotService/DeleteLotResponse")]
        System.Threading.Tasks.Task DeleteLotAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/GetLotById", ReplyAction="http://tempuri.org/ILotService/GetLotByIdResponse")]
        AdminClient.ServiceReference1.Lot GetLotById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotService/GetLotById", ReplyAction="http://tempuri.org/ILotService/GetLotByIdResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Lot> GetLotByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILotServiceChannel : AdminClient.ServiceReference1.ILotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LotServiceClient : System.ServiceModel.ClientBase<AdminClient.ServiceReference1.ILotService>, AdminClient.ServiceReference1.ILotService {
        
        public LotServiceClient() {
        }
        
        public LotServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LotServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddLot(AdminClient.ServiceReference1.Lot lot) {
            base.Channel.AddLot(lot);
        }
        
        public System.Threading.Tasks.Task AddLotAsync(AdminClient.ServiceReference1.Lot lot) {
            return base.Channel.AddLotAsync(lot);
        }
        
        public AdminClient.ServiceReference1.Lot[] GetAllLotsByAuction(AdminClient.ServiceReference1.Auction auction) {
            return base.Channel.GetAllLotsByAuction(auction);
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Lot[]> GetAllLotsByAuctionAsync(AdminClient.ServiceReference1.Auction auction) {
            return base.Channel.GetAllLotsByAuctionAsync(auction);
        }
        
        public void UpdateLot(AdminClient.ServiceReference1.Lot lot) {
            base.Channel.UpdateLot(lot);
        }
        
        public System.Threading.Tasks.Task UpdateLotAsync(AdminClient.ServiceReference1.Lot lot) {
            return base.Channel.UpdateLotAsync(lot);
        }
        
        public void DeleteLot(int id) {
            base.Channel.DeleteLot(id);
        }
        
        public System.Threading.Tasks.Task DeleteLotAsync(int id) {
            return base.Channel.DeleteLotAsync(id);
        }
        
        public AdminClient.ServiceReference1.Lot GetLotById(int id) {
            return base.Channel.GetLotById(id);
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Lot> GetLotByIdAsync(int id) {
            return base.Channel.GetLotByIdAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBidService")]
    public interface IBidService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBidService/AddBid", ReplyAction="http://tempuri.org/IBidService/AddBidResponse")]
        void AddBid(AdminClient.ServiceReference1.Bid bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBidService/AddBid", ReplyAction="http://tempuri.org/IBidService/AddBidResponse")]
        System.Threading.Tasks.Task AddBidAsync(AdminClient.ServiceReference1.Bid bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBidService/GetAllBidsByLot", ReplyAction="http://tempuri.org/IBidService/GetAllBidsByLotResponse")]
        AdminClient.ServiceReference1.Bid[] GetAllBidsByLot(AdminClient.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBidService/GetAllBidsByLot", ReplyAction="http://tempuri.org/IBidService/GetAllBidsByLotResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Bid[]> GetAllBidsByLotAsync(AdminClient.ServiceReference1.Lot lot);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBidServiceChannel : AdminClient.ServiceReference1.IBidService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BidServiceClient : System.ServiceModel.ClientBase<AdminClient.ServiceReference1.IBidService>, AdminClient.ServiceReference1.IBidService {
        
        public BidServiceClient() {
        }
        
        public BidServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BidServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BidServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BidServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddBid(AdminClient.ServiceReference1.Bid bid) {
            base.Channel.AddBid(bid);
        }
        
        public System.Threading.Tasks.Task AddBidAsync(AdminClient.ServiceReference1.Bid bid) {
            return base.Channel.AddBidAsync(bid);
        }
        
        public AdminClient.ServiceReference1.Bid[] GetAllBidsByLot(AdminClient.ServiceReference1.Lot lot) {
            return base.Channel.GetAllBidsByLot(lot);
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Bid[]> GetAllBidsByLotAsync(AdminClient.ServiceReference1.Lot lot) {
            return base.Channel.GetAllBidsByLotAsync(lot);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMemberService")]
    public interface IMemberService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMemberService/GetAllMembers", ReplyAction="http://tempuri.org/IMemberService/GetAllMembersResponse")]
        AdminClient.ServiceReference1.Member[] GetAllMembers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMemberService/GetAllMembers", ReplyAction="http://tempuri.org/IMemberService/GetAllMembersResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Member[]> GetAllMembersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMemberService/GetMemberById", ReplyAction="http://tempuri.org/IMemberService/GetMemberByIdResponse")]
        AdminClient.ServiceReference1.Member GetMemberById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMemberService/GetMemberById", ReplyAction="http://tempuri.org/IMemberService/GetMemberByIdResponse")]
        System.Threading.Tasks.Task<AdminClient.ServiceReference1.Member> GetMemberByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMemberServiceChannel : AdminClient.ServiceReference1.IMemberService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MemberServiceClient : System.ServiceModel.ClientBase<AdminClient.ServiceReference1.IMemberService>, AdminClient.ServiceReference1.IMemberService {
        
        public MemberServiceClient() {
        }
        
        public MemberServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MemberServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MemberServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MemberServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AdminClient.ServiceReference1.Member[] GetAllMembers() {
            return base.Channel.GetAllMembers();
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Member[]> GetAllMembersAsync() {
            return base.Channel.GetAllMembersAsync();
        }
        
        public AdminClient.ServiceReference1.Member GetMemberById(int id) {
            return base.Channel.GetMemberById(id);
        }
        
        public System.Threading.Tasks.Task<AdminClient.ServiceReference1.Member> GetMemberByIdAsync(int id) {
            return base.Channel.GetMemberByIdAsync(id);
        }
    }
}
